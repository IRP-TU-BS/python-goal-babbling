from dataclasses import dataclass, field
from typing import Any

import numpy as np

from pygb._impl._core._abstract_loggable import AbstractLoggable


@dataclass
class ObservationSequence:
    """Dataclass which represents one training sequence between global goals. Actions are the result of predictions done
    by the inverse estimator. Observations are the result of executing the estimated actions on the forward model.
    """

    start_goal: np.ndarray
    stop_goal: np.ndarray
    stop_goal_index: int
    weights: list[float] = field(default_factory=list)
    local_goals: list[np.ndarray] = field(default_factory=list)
    predicted_actions: list[np.ndarray] = field(default_factory=list)
    observations: list[np.ndarray] = field(default_factory=list)


@dataclass
class ActionSequence:
    """Dataclass which represents one sequence in action space (i.e. when returning home). Actions are generated by e.g.
    a sequence generator, the observations are the result of executing those actions on the forward model.
    """

    start_action: np.ndarray
    stop_action: np.ndarray
    actions: list[np.ndarray] = field(default_factory=list)
    observations: list[np.ndarray] = field(default_factory=list)
    weights: list[float] = field(default_factory=list)


@dataclass
class RuntimeData(AbstractLoggable):
    current_sequence: ObservationSequence | ObservationSequence | None = None
    """Currently active sequence. Updated after a completed sequence. Note that data in the sequence is incomplete until
    a 'sequence-complete' event is emitted."""
    previous_sequence: ObservationSequence | ActionSequence | None = None
    """Previous sequence. Updated after a completed sequence. None indicates that the current epoch set has just been
    started."""
    performance_error: float | None = None
    """RMSE on all test goals. Updated after a completed epoch and before an 'epoch-complete' (see pygb.Events) is
    emitted."""
    opt_performance_errors: dict[str, float] = field(default_factory=dict)
    """RMSE on all optional test goals. Also updated after an epoch has been completed."""
    observation_index: int = 0
    """Current observation (or step) within a sequence."""
    sequence_index: int = 0
    """Current sequence index, i.e. indicates the progress within the current epoch."""
    epoch_index: int = 0
    """Current epoch index, i.e. indicates the progress within the current epoch set."""
    epoch_set_index: int = 0
    """Current epoch set index, i.e. indicates the progress in the overall training."""
    sequences: list[ActionSequence | ObservationSequence] = field(default_factory=list)
    """List of completed (i.e. previous) sequences. List is reset after an 'epoch-set-complete' (see pygb.Events) event
    is emitted"""
    train_goal_error: list[float] = field(default_factory=list)
    """Prediction error on each training goal, calculated after the goal has been visited."""
    train_goal_visit_count: list[int] = field(default_factory=list)
    """Visit count per training goal. Reset before a new epoch set is started."""

    def metrics(self) -> dict[str, Any]:
        """Returns the performance errors formatted as a dictionary.

        Returns:
            Performance errors.
        """
        _metrics = {"performance_error": self.performance_error}

        if self.opt_performance_errors is not None:
            _metrics.update(
                {f"{key}_performance_error": performance for key, performance in self.opt_performance_errors.items()}
            )

        return _metrics
